
swagger: "2.0"
info:
  description: "VAP Final Project"
  version: "1.0.0"
  title: "Product Cart "
host: locahost:3000
basePath: "/"
tags:
- name: "item"
- name: "Category "
  description: "Category of items "


schemes:
- "http"

paths:
  /item:
      
    post:
      tags:
      - "item"
      summary: "adding new item to the inventory"
      operationId: "additem"
      consumes:
        - "application/json"      
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ITEM"
      responses:
        200:
          description: Succesfully adding the item
          schema:
            type: object
            properties:
              success: 
                type: boolean
              id: 
                type: number
        405:
          description: "Invalid input"
      
  /item/{itemId}/uploadImage:
  
    post:
      tags:
      - "item"
      summary: "uploads an image of the item"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Item"
      
  '/item/{itemid}':
    get:
      tags:
        - item
      consumes:
        - "application/json"
      summary: Find item by ID
      description: Returns a single Item
      operationId: getItemById
      parameters:
        - name: itemid
          in: path
          description: ID of pet to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ITEM'
        '400':
          description: Invalid ID supplied
        '404':
          description: ITEM not found
    put :
      tags:
        - item
      summary: Update an existing item
      description: ''
      operationId: updateProduct
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - required: true
          in: path
          name: productID
          type: string
        - required: true
          in: body
          name: body
          description: Items that are modified
            $ref: '#/definitions/ITEM'
      responses:
        '200':
          description: item updated 
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    delete:  
      tags:
        - item
      summary: Deletes a item
      description: ''
      operationId: deleteItem
      produces:
        - application/json
      parameters:
        - name : product id 
          in: path
          description: Item id to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Product deleted
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found


definitions:
  Category:
    type: "object"
    properties:
      name:
        type: "string"
      tax:
        type: number
    example:
      name: "name"
      tax : 5

  Brands:
    type: "object"
    properties:
      name:
        type: "string"
    example:
      name: "name"
      
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    example:
      name: "name"
      id: 1
  
  ITEM:
    type: "object"
    required : 
      - id 
      - name 
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      brand:
        $ref: "#/definitions/Brands"
      price:
        type: number
      sku:
        type: number 
      name:
        type: "string"
        example: "shoes"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      metadata:
        type: object
        additionalProperties:
          type: string
      status:
        type: "string"
        description: "item status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
      digital:
        type : boolean
    example:
      name: "shoes"
      id: 0
      category:
        name: "name"
        id: 6
      brand:
        name: "name"
      price:
        name: 1000
      tags:
      - name: "name"
        id: 1
      - name: "name"
        id: 1
      status: "available"
      photoUrls:
      - "photoUrls"
      - "photoUrls"
  
    
      
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
    example:
      code: 0
      type: "type"
      message: "message"
